#version 430 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct ParticleGPU
{
	vec4 Position;
	vec4 Velocity;

	float Rotation;
	float LifeRemaining;

	float SizeBegin;
	bool Active;
};

struct VertexGPU {
	vec4 position;
	vec4 texcoord;
};

layout(binding = 0) buffer inputBuffer
{
	ParticleGPU datas[];
};

layout(binding = 1) buffer OutputBuffer {
    VertexGPU vertexs[];
};

uniform float ts;
uniform float LifeTime;
uniform vec3 cameraDirection;
uniform vec3 cameraPosition;


mat4 caltranslate(mat4 m, vec3 v)
{
	mat4 result = m;
	result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];
	return result;
}

mat4 calrotate(mat4 m, float angle, vec3 v)
{
	float c = cos(angle);
    float s = sin(angle);
    float ic = 1.0 - c;

    vec3 axis = normalize(v);
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    mat4 rotation = mat4(
        x*x*ic + c,     x*y*ic - z*s,   x*z*ic + y*s,   0.0,
        x*y*ic + z*s,   y*y*ic + c,     y*z*ic - x*s,   0.0,
        x*z*ic - y*s,   y*z*ic + x*s,   z*z*ic + c,     0.0,
        0.0,            0.0,            0.0,            1.0
    );

    return m * rotation;
}

mat4 calscale(mat4 m, vec3 v)
{
	mat4 Result = m;
	Result[0][0] = m[0][0] * v[0];
	Result[1][1] = m[1][1] * v[1];
	Result[2][2] = m[2][2] * v[2];
	Result[3] = m[3];
	return Result;
}

void main()
{
	uint index = gl_WorkGroupID.x;
	

	if(!datas[index].Active)
	{
		return;
	}

	if(datas[index].LifeRemaining <= 0.0f)
	{
		datas[index].Active = false;
		return;
	}

	//update
	datas[index].LifeRemaining -= ts;
	datas[index].Position += datas[index].Velocity * ts;
	datas[index].Rotation += 0.01f * ts;

	float life = datas[index].LifeRemaining / LifeTime;
	float size = life * datas[index].SizeBegin;

	vec4 right = vec4(normalize(cross(cameraDirection, vec3(0.0, 1.0, 0.0))), 0.0);
	vec4 up = vec4(normalize(cross(vec3(right), cameraDirection)), 0.0);

	//mat3 rotateMatrix = calrotate(mat4(1.0f), particle.Rotation, camera.GetPosition() - glm::vec3(particle.Position));

	vertexs[index * 4 + 0].position = datas[index].Position + vec4(-0.5, -0.5, 0.0, 1.0);
	vertexs[index * 4 + 1].position = datas[index].Position + vec4( 0.5, -0.5, 0.0, 1.0);
	vertexs[index * 4 + 2].position = datas[index].Position + vec4( 0.5,  0.5, 0.0, 1.0);
	vertexs[index * 4 + 3].position = datas[index].Position + vec4(-0.5,  0.5, 0.0, 1.0);

	//vertexs[index * 4 + 0].position = datas[index].Position + (-right * size * 0.5f - up * size * 0.5f);
	//vertexs[index * 4 + 1].position = datas[index].Position + (+right * size * 0.5f - up * size * 0.5f);
	//vertexs[index * 4 + 2].position = datas[index].Position + (+right * size * 0.5f + up * size * 0.5f);
	//vertexs[index * 4 + 3].position = datas[index].Position + (-right * size * 0.5f + up * size * 0.5f);

	vertexs[index * 4 + 0].texcoord = vec4(0.0f, 0.0f, 0.0f, 0.0f);
	vertexs[index * 4 + 1].texcoord = vec4(1.0f, 0.0f, 0.0f, 0.0f);
	vertexs[index * 4 + 2].texcoord = vec4(1.0f, 1.0f, 0.0f, 0.0f);
	vertexs[index * 4 + 3].texcoord = vec4(0.0f, 1.0f, 0.0f, 0.0f);

}