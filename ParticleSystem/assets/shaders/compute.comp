#version 430 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle
{
	vec3 Position;
	vec3 Velocity;
	float Rotation;
	float SizeBegin, SizeEnd;

	float LifeTime;
	float LifeRemaining;

	bool Active;
};

layout(binding = 0) buffer inputBuffer
{
	Particle datas[];
};

layout(binding = 1) buffer OutputBuffer {
    mat4 model;
};

mat4 caltranslate(mat4 m, vec3 v)
{
	mat4 result = m;
	result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];
	return result;
}

mat4 calrotate(mat4 m, float angle, vec3 v)
{
	float c = cos(angle);
    float s = sin(angle);
    float ic = 1.0 - c;

    vec3 axis = normalize(v);
    float x = axis.x;
    float y = axis.y;
    float z = axis.z;

    mat4 rotation = mat4(
        x*x*ic + c,     x*y*ic - z*s,   x*z*ic + y*s,   0.0,
        x*y*ic + z*s,   y*y*ic + c,     y*z*ic - x*s,   0.0,
        x*z*ic - y*s,   y*z*ic + x*s,   z*z*ic + c,     0.0,
        0.0,            0.0,            0.0,            1.0
    );

    return m * rotation;
}

mat4 calscale(mat4 m, vec3 v)
{
	mat4 Result = m;
	Result[0][0] = m[0][0] * v[0];
	Result[1][1] = m[1][1] * v[1];
	Result[2][2] = m[2][2] * v[2];
	Result[3] = m[3];
	return Result;
}


uniform float ts;


void main()
{
	uint index = gl_GlobalInvocationID.x;
	Particle p = datas[index];

	p.LifeRemaining -= ts;
	p.Position +=p.Velocity * ts;
	p.Rotation += 0.01f * ts;

	float life = p.LifeRemaining / p.LifeTime;
	float size = p.SizeBegin - (p.SizeBegin - p.SizeEnd) *(1.0f - life);
	

	mat4 transform = mat4(1.0f);

	transform = caltranslate(transform, vec3(p.Position.x, p.Position.y, p.Position.z))
		* calrotate(transform, p.Rotation, vec3(0.0f, 0.0f, 1.0f))
		* calscale(transform, vec3(size, size, 1.0f ));



}